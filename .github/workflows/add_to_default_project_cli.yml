name: Add issue to Backlog project

# https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/using-github-cli-in-workflows
#
# Example refs:
#  * https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions

on:
  issues:
    types:
      - opened

# Environment variables available to all jobs and steps in this workflow
env:
  GH_TOKEN: ${{ secrets.GH_ORG_BEST_FAMILY_PROJECTS_ADMIN }}
  PROJECT_NUMBER: 4
  PROJECT_URL: "https://github.com/orgs/best-family/projects/4"
  #LABELS_ADDED: "" #TODO - future feature - list of labels to add to issues when theyre added to the project

jobs:
  add-issue-to-backlog:
    runs-on: ubuntu-latest
    steps:
      - name: retrieve list of repo topics
        run: |
          repoTopicList=$(gh api repos/$GITHUB_REPOSITORY/topics)
          echo 'REPO_TOPIC_LIST='$repoTopicList >> $GITHUB_ENV
      - name: retrieve list of repo languages
        run: |
          repoLanguageList=$(gh api repos/$GITHUB_REPOSITORY/languages)
          echo 'REPO_LANGUAGE_LIST'=$repoLanguageList >> $GITHUB_ENV

      # now we need to know if the issues in this repo have already been added to the PROJECT_TARGET
      # based on example at https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions
      # First, use the GraphQL API to request the project's node ID.
      # Uses [GitHub CLI](https://cli.github.com/manual/) to query the API for the ID of the project
      - name: retrieve project ID
        run: |
          projectID="$(gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                }
              }
            }
          ' -f org=$GITHUB_REPOSITORY_OWNER -F number=$PROJECT_NUMBER \
            --jq '.data.organization.projectV2.id')"

          echo 'PROJECT_ID='$projectID >> $GITHUB_ENV

      # next up, we need to add our issue to the project.


      # we always run this last so we get full visibility of all env vars including the ones that have been set in earlier steps.
      - name: display environment variables
        run: |
          printenv | sort

  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      # - name: Dump strategy context
      #   env:
      #     STRATEGY_CONTEXT: ${{ toJson(strategy) }}
      #   run: echo "$STRATEGY_CONTEXT"
      # - name: Dump matrix context
      #   env:
      #     MATRIX_CONTEXT: ${{ toJson(matrix) }}
      #   run: echo "$MATRIX_CONTEXT"
