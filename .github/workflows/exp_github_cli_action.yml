name: experiment with GitHub CLI in Actions

# https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/using-github-cli-in-workflows
# Example refs:
#  * https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions

on:
  workflow_dispatch:
  push:
    branches: [ "develop" ]

# Environment variables available to all jobs and steps in this workflow
env:
  GH_TOKEN: ${{ secrets.GH_ORG_BEST_FAMILY_PROJECTS_ADMIN }}
  PROJECT_NUMBER: 4
  PROJECT_URL: "https://github.com/orgs/best-family/projects/4"
  #LABELS_ADDED: "" #TODO - future feature - list of labels to add to issues when theyre added to the project

jobs:
  list-repo-topics:
    runs-on: ubuntu-latest
    steps:
      - name: display environment variables
        run: |
          printenv | sort
      - name: retrieve list of repo topics
        run: |
          repoTopicList=$(gh api repos/$GITHUB_REPOSITORY/topics)
          echo 'REPO_TOPIC_LIST='$repoTopicList >> $GITHUB_ENV
      - name: retrieve list of repo languages
        run: |
          repoLanguageList=$(gh api repos/$GITHUB_REPOSITORY/languages)
          echo 'REPO_LANGUAGE_LIST'=$repoLanguageList >> $GITHUB_ENV

      # now we need to know if the issues in this repo have already been added to the PROJECT_TARGET

      # based on example at https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions
      # First, use the GraphQL API to request the project's node ID.
      # Uses [GitHub CLI](https://cli.github.com/manual/) to query the API for the ID of the project
      # and return the name and ID of the first 20 fields in the project. `fields` returns a union and
      # the query uses inline fragments (`... on`) to return information about any `ProjectV2Field`
      # and `ProjectV2SingleSelectField` fields. The response is stored in a file called
      # `project_data.json`.
      - name: retrieve project ID
        run: |
          gh api graphql -f query='
          query($org: String!, $number: Int!) {
            organization(login: $org){
              projectV2(number: $number) {
                id
                fields(first:20) {
                  nodes {
                    ... on ProjectV2Field {
                      id
                      name
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }' -f org=$GITHUB_REPOSITORY_OWNER -F number=$PROJECT_NUMBER
